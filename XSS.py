import socket
import requests
from bs4 import BeautifulSoup as bs
from urllib.parse import urljoin, urlparse
from pprint import pprint

# Function to resolve a URL to an IP address
def resolve_ip(url):
    try:
        parsed_url = urlparse(url)
        domain = parsed_url.netloc
        ip_address = socket.gethostbyname(domain)
        return ip_address
    except socket.gaierror:
        print(f"Error: Could not resolve URL {url}")
        return None

# Function to scan a specific port
def scanport(addr, port, timeout):
    socket_obj = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    socket.setdefaulttimeout(timeout)
    result = socket_obj.connect_ex((addr, port))
    socket_obj.close()

    if result == 0:
        try:
            machine_hostname = socket.gethostbyaddr(addr)[0]
        except socket.herror:
            machine_hostname = "unknown"
        try:
            service = socket.getservbyport(port)
        except OSError:
            service = "unknown"
        print(f"Open port detected: {addr} \t-- Port: {port} \t-- Service: {service} \t-- Hostname: {machine_hostname}")
        return port
    else:
        return None

# Function to perform banner grabbing on an open port
def bannergrabbing(addr, port, timeout):
    print(f"Getting service information for port: {port}")
    bannergrabber = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    socket.setdefaulttimeout(timeout)
    try:
        bannergrabber.connect((addr, port))
        bannergrabber.send(b'WhoAreYou\r\n')
        banner = bannergrabber.recv(100)
        bannergrabber.close()
        print(banner.decode('utf-8'), "\n")
    except Exception as e:
        print(f"Cannot connect to port {port}: {e}")

# Function to scan a list of ports on a host
def portscanner(address, ports_to_scan, timeout):
    open_ports = []
    for port in ports_to_scan:
        open_port = scanport(address, port, timeout)
        if open_port is not None:
            open_ports.append(open_port)
    return open_ports

# Function to grab banners from open ports
def get_service_banners_for_host(address, portlist, timeout):
    for port in portlist:
        bannergrabbing(address, port, timeout)

# XSS Scanning Functions
def get_all_forms(url):
    soup = bs(requests.get(url).content, "html.parser")
    return soup.find_all("form")

def get_form_details(form):
    details = {}
    action = form.attrs.get("action").lower()
    method = form.attrs.get("method", "get").lower()
    inputs = []
    for input_tag in form.find_all("input"):
        input_type = input_tag.attrs.get("type", "text")
        input_name = input_tag.attrs.get("name")
        inputs.append({"type": input_type, "name": input_name})
    details["action"] = action
    details["method"] = method
    details["inputs"] = inputs
    return details

def submit_form(form_details, url, value):
    target_url = urljoin(url, form_details["action"])
    inputs = form_details["inputs"]
    data = {}
    for input in inputs:
        if input["type"] == "text" or input["type"] == "search":
            input["value"] = value
        input_name = input.get("name")
        input_value = input.get("value")
        if input_name and input_value:
            data[input_name] = input_value

    if form_details["method"] == "post":
        return requests.post(target_url, data=data)
    else:
        return requests.get(target_url, params=data)

def scan_xss(url):
    forms = get_all_forms(url)
    print(f"[+] Detected {len(forms)} forms on {url}.")
    js_script = "<Script>alert('hi')</scripT>"
    is_vulnerable = False
    for form in forms:
        form_details = get_form_details(form)
        content = submit_form(form_details, url, js_script).content.decode()
        if js_script in content:
            print(f"[+] XSS Detected on {url}")
            print(f"[*] Form details:")
            pprint(form_details)
            is_vulnerable = True
    return is_vulnerable

# Main script
if __name__ == '__main__':
    url = input("Enter the URL to scan: ").strip()
    
    # Step 1: Resolve the IP address
    ip_address = resolve_ip(url)
    if ip_address is None:
        print("Exiting due to unresolved IP address.")
        exit(1)

    # Step 2: Port scanning and banner grabbing
    print(f"Starting port scanning and banner grabbing for {ip_address}...")
    
    important_ports = [80, 443, 21, 990, 22, 25, 53, 389, 636, 3389, 23]
    timeout = float(input("Enter the timeout in seconds (e.g., 5.0): ").strip())

    open_ports = portscanner(ip_address, important_ports, timeout)
    if open_ports:
        get_service_banners_for_host(ip_address, open_ports, timeout)
    else:
        print("No open ports found.")

    # Step 3: XSS Scan using the original URL
    scan_xss(url)

    print("Script execution completed.")
